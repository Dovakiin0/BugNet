generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  ownerId  Int?
  User     User?      @relation(fields: [ownerId], references: [id])
  Category Category[]
  Member   Member[]
  Bug      Bug[]
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  projectId Int
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Bug       Bug[]
}

model Member {
  id        Int      @id @default(autoincrement())
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  projectId Int
  Project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    Int
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Assignee  Assignee[]
}

model Bug {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  priority    Int      @default(0)
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  categoryId Int?
  Category   Category?  @relation(fields: [categoryId], references: [id])
  projectId  Int
  Project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  openedBy   Int
  User       User       @relation(fields: [openedBy], references: [id])
  Comment    Comment[]
  Assignee   Assignee[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  bugId  Int
  Bug    Bug  @relation(fields: [bugId], references: [id], onDelete: Cascade)
  userId Int
  User   User @relation(fields: [userId], references: [id])
}

model Assignee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  bugId    Int
  Bug      Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)
  memberId Int
  Member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  githubId Int?      @unique
  Github   Github?   @relation(fields: [githubId], references: [id])
  Project  Project[]
  Member   Member[]
  Bug      Bug[]
  Comment  Comment[]
}

model Github {
  id        Int      @id @default(autoincrement())
  githubId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}
