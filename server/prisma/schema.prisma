generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  ownerId  Int?
  User     User?      @relation(fields: [ownerId], references: [id])
  Category Category[]
  Member   Member[]
  Bug      Bug[]
  Kanban   Kanban?
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  projectId Int
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Bug       Bug[]
}

model Member {
  id        Int      @id @default(autoincrement())
  status    Status   @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  projectId Int
  Project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    Int
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Assignee  Assignee[]
}

enum Status {
  Pending
  Accepted
  Rejected
}

model Bug {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  priority    Int      @default(0)
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  boardId    Int
  Board      Board      @relation(fields: [boardId], references: [id])
  categoryId Int?
  Category   Category?  @relation(fields: [categoryId], references: [id])
  projectId  Int
  Project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  openedBy   Int
  User       User       @relation(fields: [openedBy], references: [id])
  Comment    Comment[]
  Assignee   Assignee[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  bugId  Int
  Bug    Bug  @relation(fields: [bugId], references: [id], onDelete: Cascade)
  userId Int
  User   User @relation(fields: [userId], references: [id])
}

model Assignee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  bugId    Int
  Bug      Bug    @relation(fields: [bugId], references: [id], onDelete: Cascade)
  memberId Int
  Member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  githubId Int?           @unique
  Github   Github?        @relation(fields: [githubId], references: [id])
  Project  Project[]
  Member   Member[]
  Bug      Bug[]
  Comment  Comment[]
  From     Notification[] @relation("from_user")
  To       Notification[] @relation("to_user")
}

model Github {
  id          Int      @id @default(autoincrement())
  githubId    String   @unique
  accessToken String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?
}

model Notification {
  id        Int     @id @default(autoincrement())
  from      Int
  to        Int
  read      Boolean @default(false)
  target_id Int
  message   String?
  From      User    @relation("from_user", fields: [from], references: [id])
  To        User    @relation("to_user", fields: [to], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kanban {
  id        Int @id @default(autoincrement())
  projectId Int @unique

  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Board     Board[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id       Int    @id @default(autoincrement())
  kanbanId Int
  title    String

  Kanban    Kanban   @relation(fields: [kanbanId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Bug       Bug[]
}
